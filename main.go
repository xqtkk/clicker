package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math/rand"
	"net/http"
	"sync"
	"sync/atomic"
	"time"

	"github.com/gin-gonic/gin"
)

var (
	score        int
	progress     int
	autoClickers int32 // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–æ–≤
	mutex        sync.Mutex
	sseClients   = make(map[chan string]bool)
	sseMutex     sync.Mutex

	achievements = map[string]bool{
		"–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫!":     false,
		"üèÖ –ù–æ–≤–∏—á–æ–∫ ‚Üí –ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤.":  false,
		"üî• –ö–ª–∏–∫-–º–∞—Å—Ç–µ—Ä ‚Üí –ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤.": false,
		"üëë –õ–µ–≥–µ–Ω–¥–∞ ‚Üí –ù–∞–±—Ä–∞—Ç—å 1 000 000 –æ—á–∫–æ–≤.": false,
	}
)

func main() {
	r := gin.Default()

	// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
	r.GET("/score", func(c *gin.Context) {
		mutex.Lock()
		defer mutex.Unlock()
		c.JSON(http.StatusOK, gin.H{
			"score":        score,
			"progress":     progress,
			"autoClickers": atomic.LoadInt32(&autoClickers),
			"price":        getAutoClickerPrice(),
			"achievements": achievements,
		})
	})

	// –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ
	r.POST("/click", func(c *gin.Context) {
		mutex.Lock()
		defer mutex.Unlock()

		points := 1
		critical := false
		if rand.Float32() < 0.1 {
			points *= 2
			critical = true
		}

		score += points
		progress = score / 10

		checkAchievements()
		broadcastScore(critical)
		c.JSON(http.StatusOK, gin.H{"score": score, "progress": progress, "critical": critical})
	})

	// –ü–æ–∫—É–ø–∫–∞ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
	r.POST("/buy-autoclicker", func(c *gin.Context) {
		mutex.Lock()
		price := getAutoClickerPrice()
		if score >= price {
			score -= price
			atomic.AddInt32(&autoClickers, 1)
			if autoClickers == 1 {
				go startAutoClicker()
			}
		}
		mutex.Unlock()
		broadcastScore(false)
		c.JSON(http.StatusOK, gin.H{
			"score":        score,
			"progress":     progress,
			"autoClickers": atomic.LoadInt32(&autoClickers),
			"price":        getAutoClickerPrice(),
		})
	})

	// SSE –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	r.GET("/events", func(c *gin.Context) {
		clientChan := make(chan string)
		sseMutex.Lock()
		sseClients[clientChan] = true
		sseMutex.Unlock()

		c.Stream(func(w io.Writer) bool {
			if msg, ok := <-clientChan; ok {
				c.SSEvent("message", msg)
				return true
			}
			return false
		})

		sseMutex.Lock()
		close(clientChan)
		delete(sseClients, clientChan)
		sseMutex.Unlock()
	})

	r.Static("/static", "./static")

	fmt.Println("Server running on http://localhost:4000")
	if err := r.Run(":4000"); err != nil {
		log.Fatal(err)
	}
}

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
func getAutoClickerPrice() int {
	n := atomic.LoadInt32(&autoClickers)
	return 50 * (1 << n) // 50, 100, 200, 400, 800...
}

// –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
func startAutoClicker() {
	for atomic.LoadInt32(&autoClickers) > 0 {
		time.Sleep(1 * time.Second)
		mutex.Lock()
		score += int(atomic.LoadInt32(&autoClickers)) // –û–¥–∏–Ω –∫–ª–∏–∫ –∑–∞ –∫–∞–∂–¥—ã–π –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä
		progress = score / 10
		mutex.Unlock()
		broadcastScore(false)
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–ª–∏–µ–Ω—Ç–∞–º
func broadcastScore(critical bool) {
	sseMutex.Lock()
	defer sseMutex.Unlock()

	// –°–æ–∑–¥–∞—ë–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –¥–∞–Ω–Ω—ã–º–∏
	data := map[string]interface{}{
		"score":        score,
		"progress":     progress,
		"autoClickers": atomic.LoadInt32(&autoClickers),
		"price":        getAutoClickerPrice(),
		"achievements": achievements,
		"critical":     critical,
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ JSON
	jsonData, err := json.Marshal(data)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", err)
		return
	}

	// fmt.Println("–û—Ç–ø—Ä–∞–≤–∫–∞ JSON:", string(jsonData)) // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–∞–º

	for clientChan := range sseClients {
		clientChan <- string(jsonData)
	}
}

func checkAchievements() {
	if score >= 1 && !achievements["–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫!"] {
		achievements["–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫!"] = true
	}
	if score >= 100 && !achievements["üèÖ –ù–æ–≤–∏—á–æ–∫ ‚Üí –ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤."] {
		achievements["üèÖ –ù–æ–≤–∏—á–æ–∫ ‚Üí –ù–∞–±—Ä–∞—Ç—å 100 –æ—á–∫–æ–≤."] = true
	}
	if score >= 1000 && !achievements["üî• –ö–ª–∏–∫-–º–∞—Å—Ç–µ—Ä ‚Üí –ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤."] {
		achievements["üî• –ö–ª–∏–∫-–º–∞—Å—Ç–µ—Ä ‚Üí –ù–∞–±—Ä–∞—Ç—å 1000 –æ—á–∫–æ–≤."] = true
	}
	if score >= 1000000 && !achievements["üëë –õ–µ–≥–µ–Ω–¥–∞ ‚Üí –ù–∞–±—Ä–∞—Ç—å 1 000 000 –æ—á–∫–æ–≤."] {
		achievements["üëë –õ–µ–≥–µ–Ω–¥–∞ ‚Üí –ù–∞–±—Ä–∞—Ç—å 1 000 000 –æ—á–∫–æ–≤."] = true
	}
}
